https://www.ionos.de/digitalguide/server/konfiguration/linux-befehle-terminal-kommandos-im-ueberblick/
----------
GIT
nano index.html - text editor
Q - QUIT
git init - erstellt neues repository im aktuellen verzeichnis
  in ordner .git versteckter ordner werden alle versionen gespeichert

git status - zeigt an welche dateien ggf geändert wurden

git add <file> oder <ordner> - staging area, commit vorbereiten

git commit - erstellt einen neuen commit aus allen Änderungen die gestaged sind
	    best practice: immer nur eine Änderung!
	git commit -m "Nachricht" - Changelog zur aktuellen Änderung
	git commit --amend - letzten commit überschreiben - nur bei lokalen änderungen

git log - historie anzeigen lassen SHA1 Checksumme - einzigartige ID
	git log -p index.html -  ausführliche anzeige der aenderungen
	git log --oneline - anzeige commits zusammengefasst
	git log --oneline --graph --branches  - zeigt branches an

git diff - zeigt änderungen zu staging area an
    	git diff --cached   zeigte aenderung von stage zu repository ein
    	git diff hash1 hash2 -  zeigt aenderungen zw 2 commits -tip: älterer commit zu erst nennen

ACHTUNG DATENVERLUST
git reset - nimmt änderungen aus der staging area
    git reset hashXY - löscht alle änderungen nach hashXY, alle änderungen bleiben im working directory bestehen
    git reset --hard hashXY - löscht alle Änderungen nach hashXY, auch im working directory
	
git checkout hashXY - zustand von einem bestimmten commit wiederherstellen
    git checkout master - springt zurueck zum master

git stash - zwischenspeicher aktueller stand working dir
	git stash pop -  stellt letzten stand working dir wieder her
	git stash list - zeigt alle stashes an
	git diff stash - zeigt den diff des letzten stash an

git revert hashXY - erstellt neuen commit der die änderungen rueckgaengig macht

.gitignore - datei in der ignorierte pfade und dateien stehen

git rm - löscht datei
git mv - bewegt eine datei

git blame index.html - zeigt zeile fuer zeile was in welchem commit geloescht wurde
	git blame --color-lines index.html - farbliche kenntlichmachung

git branch - zeigt alle vorhandenen branches an
	git branch NAME - legt einen neuen branch an
	git checkout NAME - wechselt zu einem branch
	shortcut: git checkout -b NAME  - legt neuen branch an und wechselt direkt dorthin
	git log --oneline --graph --branches  - zeigt branches an

git merge NAMEBRANCH - versucht den aktuellen branch zu mergen
	git branch - d NAMEBRANCH - löscht den branch nach dem merge
	git log --oneline --branches --graph   - zeigt branches an
	git merge --no-ff - kein FF-Merge, also immer ein commit
	git merge --f-only - erzwingt FF Merge

git rebase NAMEBRANCH - mergen von branches mit konfliktlösung

git tag - tags anzeigen lassen
	git tag -a vx.y > v0.1
git tag -a v1.0 COMMITID


---------
